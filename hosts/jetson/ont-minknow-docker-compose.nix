{ pkgs, lib, ... }:

{
  # Containers
  virtualisation.oci-containers.containers."ont-minknow" = {
    image = "ont-minknow-pre";
    volumes = [
      "/dev/bus/usb:/dev/bus/usb:rw"
      "/run/udev:/run/udev:ro"
      "/tmp:/tmp:rw"
      "/var/lib/minknow/data:/var/lib/minknow/data:rw"
      "/var/log/minknow:/var/log/minknow:rw"
    ];
    ports = [
      "8000:8000/tcp"
      "8001:8001/tcp"
      "8002:8002/tcp"
      "8003:8003/tcp"
      "8004:8004/tcp"
      "8005:8005/tcp"
      "8006:8006/tcp"
      "8007:8007/tcp"
      "9501:9501/tcp"
      "9502:9502/tcp"
      "9503:9503/tcp"
      "9504:9504/tcp"
      "9505:9505/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--device-cgroup-rule=c 189:* rmw"
      "--network-alias=minknow"
      "--network=ont_default"
    ];
  };
  systemd.services."docker-ont-minknow" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "docker-network-ont_default.service"
      "docker-build-ont-minknow.service"
    ];
    requires = [
      "docker-network-ont_default.service"
    ];
    partOf = [
      "docker-compose-ont-root.target"
    ];
    wantedBy = [
      "docker-compose-ont-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-ont_default" = {
    path = [ pkgs.docker_26 ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f ont_default";
    };
    script = ''
      docker network inspect ont_default || docker network create ont_default
    '';
    partOf = [ "docker-compose-ont-root.target" ];
    wantedBy = [ "docker-compose-ont-root.target" ];
  };

  # Builds
  systemd.services."docker-build-ont-minknow" =
    let
      ont-minknow-dockerfile = pkgs.fetchurl {
        url = "https://raw.githubusercontent.com/Adam-osc/minknow-manager-docker/0ea1f6bc571e7df4f9b099099bf9338b72e98b3e/Dockerfile";
        sha256 = "sha256-lA76KByDiCk3hrG2LoM1S5VJ4GtxTkY3Wt6UDBZVsQ8=";
      };
    in
      {
        path = [ pkgs.docker_26 pkgs.git ];
        serviceConfig = {
          Type = "oneshot";
          TimeoutSec = 300;
        };
        script = ''
          docker build -t ont-minknow-pre . -f ${ont-minknow-dockerfile}
        '';
      };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-ont-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
